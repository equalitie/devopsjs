{
  "name": "nodemw",
  "version": "0.3.4",
  "author": {
    "name": "macbre",
    "email": "maciej.brencz@gmail.com",
    "url": "http://macbre.net"
  },
  "description": "MediaWiki API client written in node.js",
  "main": "./lib/bot",
  "repository": {
    "type": "git",
    "url": "git://github.com/macbre/nodemw.git"
  },
  "keywords": [
    "mediawiki",
    "wiki",
    "api",
    "nodejs"
  ],
  "license": "BSD",
  "engines": {
    "node": ">=0.6"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "nodemw\n======\n\nMediaWiki API client written in node.js\n\n## Requirements\n\n* nodejs\n\n## Instalation\n\n``` bash\ngit clone https://github.com/macbre/nodemw.git\n```\n\nOr [download the latest stable version](https://github.com/macbre/nodemw/tags).\n\n## Features\n\n* HTTP requests are stored in queue and performed in serial, there's no risk of flooding the server\n* nodemw core uses promise pattern powered by [deffered-js library](https://github.com/heavylifters/deferred-js)\n* nodemw supports articles creation / edit / move / delete, file uploads (using given content or via provided URL)\n\n## Where it's used\n\n* 5000 edits on [Poznań Wiki](http://poznan.wikia.com) as [Pyrabot](http://poznan.wikia.com/wiki/Specjalna:Wkład/Pyrabot) - [scripts repository](https://github.com/macbre/pyrabot)\n\n## First script\n\nAn example script can be found in `/examples` directory.\n\n``` bash\ncd examples\nnode pagesInCategory.js\n```\n\n## API\n\nThe last parameter of each function in nodemw API is a callback which will be fired\nwhen the requested action is done.\n\n### Creating a bot instance\n\n``` js\n  var bot = require('./lib/bot').bot;\n\n  // pass configuration object\n  var client = new bot({\n      server: 'en.wikipedia.org',  // host name of MediaWiki-powered site\n      path: '/w',                  // path to api.php script\n      debug: false                // is more verbose when set to true\n  });\n\n  client.getArticle('foo', function(data) {\n      // ...\n  });\n```\n\n#### Config file\n\nnodemw can use config files as well as objects directly provided to ``bot`` object constructor.\n\n``` js\n // read config from external file\n var client = new bot('config.js');\n```\n\nConfig file is a JSON-encoded object with the following fields (see ``/examples/config-DIST.js`` file):\n\n``` js\n{\n      server: 'en.wikipedia.org',  // host name of MediaWiki-powered site\n      path: '/w',                  // path to api.php script\n      debug: false,                // is more verbose when set to true\n      username: 'foo',             // account to be used when logIn is called (optional)\n      password: 'bar'              // password to be used when logIn is called (optional)\n}\n```\n\n### bot.logIn(username, password, callback)\n\nLog-in using given credentials - [read more](http://www.mediawiki.org/wiki/API:Login)\n\n### bot.getCategories(prefix, callback)\n\nGets the list of all categories on a wiki\n\n### bot.getPagesInCategory(category, callback)\n\nGets the list of pages in a given category - [read more](http://www.mediawiki.org/wiki/API:Properties#revisions_.2F_rv)\n\n### bot.getPagesByPrefix(prefix, callback)\n\nGets the list of pages by a given prefix - [read more](https://www.mediawiki.org/wiki/API:Allpages)\n\n### bot.getArticle(title, callback)\n\nGets article content and its meta data - [read more](http://www.mediawiki.org/wiki/API:Properties#revisions_.2F_rv)\n\n### bot.edit(title, content, summary, callback)\n\nCreates / edits an article - [read more](http://www.mediawiki.org/wiki/API:Edit)\n\n### bot.delete(title, reason, callback)\n\nDeletes an article - [read more](http://www.mediawiki.org/wiki/API:Delete)\n\n### bot.token(title, action, callback)\n\nReturns token required for a number of MediaWiki API operations\n\n### bot.whoami(callback)\n\nGets information about current bot's user (including rights and rate limits) - [read more](http://www.mediawiki.org/wiki/API:Meta#userinfo_.2F_ui)\n\n### bot.move(from, to, summary, callback)\n\nMoves (aka renames) given article - [read more](http://www.mediawiki.org/wiki/API:Move)\n\n### bot.getImages(callback)\n\nGets list of all images on a wiki\n\n### bot.getImageUsage(filename, callback)\n\nGets list of all articles using given image\n\n### bot.getImageInfo(filename, callback)\n\nGets metadata (including uploader, size, dimensions and EXIF data) of given image\n\n### bot.expandTemplates(content, title, callback)\n\nReturns XML with preprocessed wikitext - [read more](https://www.mediawiki.org/wiki/API:Parsing_wikitext#expandtemplates)\n\n### bot.fetchUrl(url, callback)\n\nMakes a GET request to provided resource and returns its content.\n\n### bot.getRecentChanges(start, callback)\n\nReturns entries from recent changes (starting from a given point)\n\n### bot.getRecentChanges(start, callback)\n\nReturns entries from recent changes (starting from a given point)\n\n### bot.upload(filename, content, summary, callback)\n\nUploads a given raw content as a File:[filename] - [read more](http://www.mediawiki.org/wiki/API:Upload)\n\n### bot.uploadByUrl(filename, url, summary, callback) \n\nUploads a given external resource as a File:[filename]\n\n### bot.getTemplateParamFromXml(tmplXml, paramName)\n\nGets a value of a given template parameter from article's preparsed content (see expandTemplates)\n\n### bot.getExternalLinks(title, callback)\n\nGets all external links used in article\n\n## TODO\n\n* Use promise pattern instead of callbacks.\n* Log to a file.\n* Set [proper User Agent](http://meta.wikimedia.org/wiki/User-Agent_policy).\n* Basic wikitext parsing and modifications (reading/replacing/adding template parameters)\n* --[File uploads](https://www.mediawiki.org/wiki/API:Upload)--\n",
  "readmeFilename": "README.md",
  "_id": "nodemw@0.3.4",
  "dist": {
    "shasum": "a5589a4eba01fac6a925d829fe2e873e82b3423f"
  },
  "_from": "nodemw@latest"
}
